// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.XboxController.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import frc.robot.subsystems.*;
import oi.limelightvision.limelight.frc.LimeLight;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public XboxController driverController;
public XboxController operatorController;

//Driver Controller Buttons

public JoystickButton a_Button_Driver;
public JoystickButton b_Button_Driver;
public JoystickButton x_Button_Driver;
public JoystickButton y_Button_Driver;
public JoystickButton left_Bumper_Driver;
public JoystickButton right_Bumper_Driver;
public JoystickButton back_Button_Driver;
public JoystickButton start_Button_Driver;

//Operator Controller Buttons

public JoystickButton a_Button_Operator;
public JoystickButton b_Button_Operator;
public JoystickButton x_Button_Operator;
public JoystickButton y_Button_Operator;
public JoystickButton left_Bumper_Operator;
public JoystickButton right_Bumper_Operator;
public JoystickButton back_Button_Operator;
public JoystickButton start_Button_Operator;
public LimeLight limeLight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        limeLight = new LimeLight();
        driverController = new XboxController(0);
        operatorController = new XboxController(1);

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("CommandDriveTrain", new CommandDriveTrain());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        //Driver Commands

        JoystickButton a_Button_Driver = new JoystickButton(driverController, 1);
        a_Button_Driver.whileHeld(new UnjamIntakeCommand());
        
        JoystickButton left_Bumper_Driver = new JoystickButton(driverController, 5);
        left_Bumper_Driver.whileHeld(new IntakeCommand());

        //Operator Commands

        JoystickButton a_Button_Operator = new JoystickButton(operatorController, 1);
        a_Button_Operator.whileHeld(new ExtendHookCommand());

        JoystickButton b_Button_Operator = new JoystickButton(operatorController, 2);
        b_Button_Operator.whileHeld(new RetrackHookCommand());

        JoystickButton y_Button_Operator = new JoystickButton(operatorController, 4);
        y_Button_Operator.whileHeld(new ReverseWinchCommand());

        JoystickButton x_Button_Operator = new JoystickButton(operatorController, 3);
        x_Button_Operator.whileHeld(new RetrackWinchCommand());

        JoystickButton left_Bumper_Operator = new JoystickButton(operatorController, 5);
        left_Bumper_Operator.whileHeld(new HopperCommand());

        JoystickButton right_Bumper_Operator = new JoystickButton(operatorController, 6);
        right_Bumper_Operator.whileHeld(new ShootCommand());

        JoystickButton back_Button_Operator = new JoystickButton(operatorController, 7);
        back_Button_Operator.whileHeld(new UnjamHopperCommand());

        }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getXboxController() {
        return driverController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

